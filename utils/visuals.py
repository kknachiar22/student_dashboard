# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16va5-_f6j2Aq5Xp4faLhrSYSU6evTtPj
"""

# utils/visuals.py

import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

def plot_student_radar(student_df):
    # Radar chart of survey features
    features = [
        "study_hours", "Comprehension", "NotesTaking", "Scheduling",
        "ExamCalmness", "Resilience", "DecisionMaking", "Focus",
        "Interest", "GoalClarity", "Confidence"
    ]
    values = student_df.iloc[0][features].values.tolist()
    df_radar = px.line_polar(
        r=values + [values[0]],
        theta=features + [features[0]],
        line_close=True,
        title="Survey Profile Radar"
    )
    return df_radar

def plot_prediction_comparison(student_df):
    # Bar chart of actual vs predicted
    df = student_df.iloc[0][["acad_percent", "atten_percent", "Predicted Academic", "Predicted Attendance"]]
    df = df.rename({
        "acad_percent": "Actual Acad",
        "Predicted Academic": "Pred Acad",
        "atten_percent": "Actual Attn",
        "Predicted Attendance": "Pred Attn"
    })
    fig, ax = plt.subplots()
    df.plot.bar(ax=ax, color=["#2E86AB", "#A2D5F2", "#F28C00", "#F2B438"])
    ax.set_ylabel("Percent")
    ax.set_title("Actual vs Predicted")
    plt.xticks(rotation=0)
    return fig

def plot_branch_distribution(branch_df):
    # Boxplot of academic performance
    fig, axes = plt.subplots(1, 2, figsize=(12, 5))
    sns.boxplot(
        y="Predicted Academic",
        data=branch_df,
        color="#2E86AB",
        ax=axes[0]
    )
    axes[0].set_title("Predicted Academic Distribution")
    sns.boxplot(
        y="Predicted Attendance",
        data=branch_df,
        color="#F28C00",
        ax=axes[1]
    )
    axes[1].set_title("Predicted Attendance Distribution")
    plt.tight_layout()
    return fig

def plot_overall_heatmap(df):
    # Correlation heatmap of numeric columns
    num_cols = df.select_dtypes("number").columns
    corr = df[num_cols].corr()
    fig, ax = plt.subplots(figsize=(10, 8))
    sns.heatmap(corr, annot=True, cmap="Blues", ax=ax)
    ax.set_title("Correlation Heatmap")
    return fig

def plot_risk_distribution(df):
    # Define risk: academic <50 or attendance <50
    df["Risk"] = df.apply(
        lambda r: "High" if (r.acad_percent<50 or r.atten_percent<50) else "Low",
        axis=1
    )
    fig = px.histogram(
        df, x="Risk",
        color="Risk",
        title="Risk Category Counts",
        color_discrete_map={"High":"#D9534F","Low":"#5CB85C"}
    )
    return fig