# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16va5-_f6j2Aq5Xp4faLhrSYSU6evTtPj
"""

import streamlit as st
import pandas as pd
from rf_pipeline import predict_and_log, train_and_save
from utils.helpers import df_to_pdf

st.set_page_config(
    page_title="Student Performance Dashboard",
    layout="wide",
    initial_sidebar_state="expanded"
)

st.sidebar.title("Role Selection")
role = st.sidebar.radio("Choose your role:", ["Viewer", "Educator", "Admin"])

st.title("ðŸŽ“ Student Performance Dashboard")

# Upload new survey data
uploaded_file = st.file_uploader(
    "Upload student survey Excel file",
    type=["xlsx"],
    help="Excel with same columns as training data"
)

if uploaded_file:
    df_input = pd.read_excel(uploaded_file)
    st.subheader("Input Data Preview")
    st.dataframe(df_input)

    # Predict and log
    st.subheader("Predictions")
    try:
        df_results = predict_and_log(df_input)
        st.dataframe(df_results.loc[:, df_results.columns.str.contains("_pred")])

        # Download PDF report
        pdf_bytes = df_to_pdf(df_results)
        st.download_button(
            label="ðŸ“¥ Export Results as PDF",
            data=pdf_bytes,
            file_name="student_predictions.pdf",
            mime="application/pdf"
        )
    except Exception as e:
        st.error(f"Prediction failed: {e}")

# Admin-only: retrain model
if role == "Admin":
    st.markdown("---")
    st.header("ðŸ”„ Retrain Model")
    st.warning("This will overwrite the existing model and schema.")
    if st.checkbox("Enable retraining"):
        if uploaded_file:
            with st.spinner("Retraining modelâ€¦"):
                train_and_save(df_input)
            st.success("Model retrained successfully")
        else:
            st.info("Please upload a full training dataset first.")